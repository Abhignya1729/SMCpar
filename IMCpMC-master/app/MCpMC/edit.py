
saved_value = 0
calculated_value = 0
for q in numpy.arange(0, 1, 0.01):
    for p in numpy.arange(0, 1, 0.01):
        if p+q <= 1:
            calculated_value = ((q) * (q+(-1)))/((q+p) * (2*q+p+(-2)))
            if saved_value < calculated_value:
                q_max = q
                p_max = p
            saved_value = calculated_value
print("p=", p_max, "q", q_max, 'func_valu', saved_value)


0.6561*p**6*q**2 + 1.9683*p**5*q**4 + 0.0729*p**5*q*(-3*p - 3*q + 3) + 53.1441*p**4*q**8 + 5.9049*p**4*q**6 + 1.9683*p**4*q**5*(-3*p - 3*q + 3) + 0.6561*p**4*q**4 + 0.2187*p**4*q**3 + 0.0729*p**4*q**2*(-3*p - 3*q + 3) + 0.0729*p**4*q**2 + 0.0243*p**4*q*(-3*p - 3*q + 3)**2 + 35.4294*p**3*q**8 + 1.9683*p**3*q**6*(-3*p - 3*q + 3) + 0.6561*p**3*q**5*(-3*p - 3*q + 3) + 0.2187*p**3*q**4*(-3*p - 3*q + 3)**4 + 0.8748*p**3*q**4 + 0.0729*p**3*q**3*(-3*p - 3*q + 3)**3 + 0.1458*p**3*q**3*(-3*p - 3*q + 3) + 0.0729*p**3*q**3 + 0.0243*p**3*q**2*(-3*p - 3*q + 3)**5 + 0.0243*p**3*q**2*(-3*p - 3*q + 3)**3 + 0.0243*p**3*q**2*(-3*p - 3*q + 3)**2 + 0.0729*p**3*q**2*(-3*p - 3*q + 3) + 0.1944*p**3*q**2 + 0.0081*p**3*q*(-3*p - 3*q + 3)**4 + 0.0243*p**3*q*(-3*p - 3*q + 3)**2 + 0.0243*p**3*q*(-3*p - 3*q + 3) + 0.1053*p**3*q + 1.9683*p**2*q**7*(-3*p - 3*q + 3) + 1.9683*p**2*q**7 + 0.2187*p**2*q**5*(-3*p - 3*q + 3)**2 + 0.2187*p**2*q**5*(-3*p - 3*q + 3) + 0.4374*p**2*q**5 + 0.0729*p**2*q**4*(-3*p - 3*q + 3)**3 + 0.2187*p**2*q**4*(-3*p - 3*q + 3) + 0.5103*p**2*q**4 + 0.1701*p**2*q**3*(-3*p - 3*q + 3) + 0.3159*p**2*q**3 + 0.0162*p**2*q**2*(-3*p - 3*q + 3)**4 + 0.0162*p**2*q**2*(-3*p - 3*q + 3)**3 + 0.0324*p**2*q**2*(-3*p - 3*q + 3)**2 + 0.0891*p**2*q**2*(-3*p - 3*q + 3) + 0.2835*p**2*q**2 + 0.0027*p**2*q*(-3*p - 3*q + 3)**6 + 0.0081*p**2*q*(-3*p - 3*q + 3)**2 + 0.054*p**2*q*(-3*p - 3*q + 3) + 0.1485*p**2*q + 0.6561*p*q**7*(-3*p - 3*q + 3) + 0.4374*p*q**6 + 0.0729*p*q**5*(-3*p - 3*q + 3)**4 + 0.0729*p*q**5*(-3*p - 3*q + 3)**2 + 0.2187*p*q**5*(-3*p - 3*q + 3) + 0.4374*p*q**5 + 0.0729*p*q**4*(-3*p - 3*q + 3) + 0.1458*p*q**4 + 0.0081*p*q**3*(-3*p - 3*q + 3)**4 + 0.0243*p*q**3*(-3*p - 3*q + 3)**2 + 0.0324*p*q**3*(-3*p - 3*q + 3) + 0.1944*p*q**3 + 0.0027*p*q**2*(-3*p - 3*q + 3)**4 + 0.0135*p*q**2*(-3*p - 3*q + 3)**3 + 0.0324*p*q**2*(-3*p - 3*q + 3)**2 + 0.0864*p*q**2*(-3*p - 3*q + 3) + 0.3105*p*q**2 + 0.0027*p*q*(-3*p - 3*q + 3)**6 + 0.0018*p*q*(-3*p - 3*q + 3)**5 + 0.0018*p*q*(-3*p - 3*q + 3)**4 + 0.009*p*q*(-3*p - 3*q + 3)**3 + 0.0315*p*q*(-3*p - 3*q + 3)**2 + 0.0801*p*q*(-3*p - 3*q + 3) + 0.2277*p*q + 3*q*(-3.0*p - 3.0*q + 3.0)*(-3*p - 3*q + 3)**6/10000 + 3*q*(-3.0*p - 3.0*q + 3.0)*(-3*p - 3*q + 3)**5/2500 + 21*q*(-3.0*p - 3.0*q + 3.0)*(-3*p - 3*q + 3)**4/10000 + 9*q*(-3.0*p - 3.0*q + 3.0)*(-3*p - 3*q + 3)**3/2000 + 93*q*(-3.0*p - 3.0*q + 3.0)*(-3*p - 3*q + 3)**2/5000 + 321*q*(-3*p - 3*q + 3)*(-3.0*p - 3.0*q + 3.0)/5000 + 777*q*(-3.0*p - 3.0*q + 3.0)/5000 + 0.5028*q

53.1441*p**7*q**5 + 11.8098*p**6*q**4*(-3*p - 3*q + 3) + 53.1441*p**5*q**7 + 17.7147*p**5*q**6 + 1.9683*p**5*q**4*(-3*p - 3*q + 3) + 0.6561*p**5*q**3*(-3*p - 3*q + 3) + 0.6561*p**5*q**3 + 0.2187*p**5*q**2*(-3*p - 3*q + 3) + 0.0729*p**5*q*(-3*p - 3*q + 3)**4 + 0.0729*p**5*q*(-3*p - 3*q + 3) + 0.1458*p**5*q + 0.0243*p**5*(-3*p - 3*q + 3)**2 + 0.0486*p**5 + 17.7147*p**4*q**7*(-3*p - 3*q + 3) + 17.7147*p**4*q**7 + 1.9683*p**4*q**5 + 5.2488*p**4*q**4*(-3*p - 3*q + 3) + 0.2187*p**4*q**3*(-3*p - 3*q + 3)**2 + 1.0935*p**4*q**3*(-3*p - 3*q + 3) + 0.6561*p**4*q**3 + 0.2187*p**4*q**2*(-3*p - 3*q + 3) + 0.1458*p**4*q**2 + 0.0243*p**4*q*(-3*p - 3*q + 3)**3 + 0.0486*p**4*q*(-3*p - 3*q + 3)**2 + 0.1215*p**4*q*(-3*p - 3*q + 3) + 0.1944*p**4*q + 0.0081*p**4*(-3*p - 3*q + 3)**2 + 0.0324*p**4*(-3*p - 3*q + 3) + 0.0729*p**4 + 5.9049*p**3*q**7*(-3*p - 3*q + 3) + 1.9683*p**3*q**6*(-3*p - 3*q + 3) + 0.6561*p**3*q**5*(-3*p - 3*q + 3)**3 + 2.6244*p**3*q**5*(-3*p - 3*q + 3) + 1.9683*p**3*q**5 + 1.0935*p**3*q**4*(-3*p - 3*q + 3) + 0.8748*p**3*q**4 + 0.0729*p**3*q**3*(-3*p - 3*q + 3)**2 + 0.5832*p**3*q**3*(-3*p - 3*q + 3) + 0.3645*p**3*q**3 + 0.0243*p**3*q**2*(-3*p - 3*q + 3)**2 + 0.4374*p**3*q**2*(-3*p - 3*q + 3) + 0.4374*p**3*q**2 + 0.0081*p**3*q*(-3*p - 3*q + 3)**4 + 0.0081*p**3*q*(-3*p - 3*q + 3)**3 + 0.0162*p**3*q*(-3*p - 3*q + 3)**2 + 0.2025*p**3*q*(-3*p - 3*q + 3) + 0.2673*p**3*q + 0.0027*p**3*(-3*p - 3*q + 3)**4 + 0.0081*p**3*(-3*p - 3*q + 3)**3 + 0.0108*p**3*(-3*p - 3*q + 3)**2 + 0.0324*p**3*(-3*p - 3*q + 3) + 0.1296*p**3 + 2.6244*p**2*q**6*(-3*p - 3*q + 3) + 1.3122*p**2*q**5*(-3*p - 3*q + 3) + 0.4374*p**2*q**5 + 0.3645*p**2*q**4*(-3*p - 3*q + 3) + 0.2187*p**2*q**4 + 0.0243*p**2*q**3*(-3*p - 3*q + 3)**4 + 0.0243*p**2*q**3*(-3*p - 3*q + 3)**2 + 0.3888*p**2*q**3*(-3*p - 3*q + 3) + 0.1701*p**2*q**3 + 0.0081*p**2*q**2*(-3*p - 3*q + 3)**4 + 0.0081*p**2*q**2*(-3*p - 3*q + 3)**3 + 0.0081*p**2*q**2*(-3*p - 3*q + 3)**2 + 0.2916*p**2*q**2*(-3*p - 3*q + 3) + 0.243*p**2*q**2 + 0.0027*p**2*q*(-3*p - 3*q + 3)**5 + 0.0054*p**2*q*(-3*p - 3*q + 3)**3 + 0.0351*p**2*q*(-3*p - 3*q + 3)**2 + 0.1971*p**2*q*(-3*p - 3*q + 3) + 0.27*p**2*q + 0.0009*p**2*(-3*p - 3*q + 3)**6 + 0.0009*p**2*(-3*p - 3*q + 3)**5 + 0.0018*p**2*(-3*p - 3*q + 3)**4 + 0.0099*p**2*(-3*p - 3*q + 3)**3 + 0.0198*p**2*(-3*p - 3*q + 3)**2 + 0.1233*p**2*(-3*p - 3*q + 3) + 0.2601*p**2 + 0.2187*p*q**6*(-3*p - 3*q + 3) + 0.5103*p*q**5*(-3*p - 3*q + 3) + 0.3888*p*q**4*(-3*p - 3*q + 3) + 0.3888*p*q**3*(-3*p - 3*q + 3) + 0.2754*p*q**2*(-3*p - 3*q + 3) + 0.1755*p*q*(-3*p - 3*q + 3) + 3*p*(-3.0*p - 3.0*q + 3.0)*(-3*p - 3*q + 3)**5/10000 + 9*p*(-3.0*p - 3.0*q + 3.0)*(-3*p - 3*q + 3)**4/2500 + 69*p*(-3.0*p - 3.0*q + 3.0)*(-3*p - 3*q + 3)**3/10000 + 27*p*(-3.0*p - 3.0*q + 3.0)*(-3*p - 3*q + 3)**2/1250 + 3*p*(-3*p - 3*q + 3)*(-3.0*p - 3.0*q + 3.0)/50 + 0.0822*p*(-3*p - 3*q + 3) + 159*p*(-3.0*p - 3.0*q + 3.0)/1000 - 0.0138*p + 0.2187*q**7*(-3*p - 3*q + 3) + 0.3645*q**6*(-3*p - 3*q + 3) + 0.2187*q**5*(-3*p - 3*q + 3) + 0.1458*q**4*(-3*p - 3*q + 3) + 0.1809*q**3*(-3*p - 3*q + 3) + 0.1836*q**2*(-3*p - 3*q + 3) + 0.1617*q*(-3*p - 3*q + 3) - 0.5094*q + 0.5094

