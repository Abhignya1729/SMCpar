import numpy as np
import matplotlib.pyplot as plt

def swap_power_symbol(fun):
    Fun = fun.replace("^", "**")
    return Fun

# fun = "x1+x2+x3^3+x4"
# Fun = float(swap_power_symbol(fun))
a = [[0] * 10000 for i in range(1)]
b = np.arange(0, 100, 0.01)
i = 0
for x1 in np.arange(0, 1, 0.1):
    for x2 in np.arange(0, 1, 0.1):
        for x3 in np.arange(0, 1, 0.1):
            for x4 in np.arange(0, 1, 0.1):
                a[0][i] = 2*x1**3*x2*x3*(-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x3 + 2)*(-2*x4 + 2)**2/625 + 4*x1**2*x2**2*x3*x4*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)**3/625 + 4*x1**2*x2**2*x3*x4*(-2*x3 + 2)*(-2*x4 + 2)/625 + 2*x1**2*x2**2*x3*(-2*x1 + 2)/625 + 2*x1**2*x2**2*x3/625 + x1**2*x2**2*(-2*x1 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/625 + x1**2*x2**2*(-2*x1 + 2)*(-2*x3 + 2)/625 + 4*x1**2*x2*x3**2*x4*(-2*x2 + 2)/625 + 2*x1**2*x2*x3**2*(-2*x2 + 2)/625 + 2*x1**2*x2*x3*x4*(-2*x2 + 2)*(-2*x3 + 2)/625 + 2*x1**2*x2*x3*x4*(-2*x2 + 2)/625 + 2*x1**2*x2*x3*x4/625 + 2*x1**2*x2*x3*(-2*x2 + 2)*(-2*x4 + 2)/625 + x1**2*x2*x3*(-2*x4 + 2)/625 + 8*x1**2*x2*x3/625 + 2*x1**2*x2*x4**2*(-2*x3 + 2)/625 + 2*x1**2*x2*x4**2*(-2*x4 + 2)/625 + 4*x1**2*x2*x4**2/625 + x1**2*x2*x4*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x4 + 2)/625 + x1**2*x2*x4*(-2*x1 + 2)*(-2*x4 + 2)/625 + x1**2*x2*x4*(-2*x3 + 2)*(-2*x4 + 2)/625 + 2*x1**2*x2*x4/625 + x1**2*x2*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)**3/1250 + x1**2*x2*(-2*x3 + 2)*(-2*x4 + 2)/1250 + 7*x1**2*x2*(-2*x3 + 2)/625 + 4*x1**2*x3*x4**3*(-2*x2 + 2)**2*(-2*x3 + 2)**2*(-2*x4 + 2)/625 + x1**2*x3*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/1250 + x1**2*x4*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/1250 + x1**2*x4*(-2*x2 + 2)*(-2*x4 + 2)/625 + x1**2*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/625 + 4*x1*x2**2*x3**2*x4/625 + 2*x1*x2**2*x3*x4*(-2*x4 + 2)/625 + 4*x1*x2**2*x3*x4/625 + 2*x1*x2**2*x3*(-2*x1 + 2)*(-2*x4 + 2)/625 + 3*x1*x2**2*x3*(-2*x4 + 2)/625 + 3*x1*x2**2*x3/625 + 2*x1*x2**2*x4**2*(-2*x1 + 2)**2/625 + x1*x2**2*x4*(-2*x1 + 2)**2*(-2*x2 + 2)*(-2*x3 + 2)**2/625 + x1*x2**2*x4*(-2*x1 + 2)/625 + x1*x2**2*(-2*x1 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/625 + 4*x1*x2*x3**2*x4*(-2*x1 + 2)*(-2*x4 + 2)/625 + 2*x1*x2*x3**2*x4*(-2*x2 + 2)**2/625 + 2*x1*x2*x3**2*x4/625 + x1*x2*x3**2*(-2*x1 + 2)**2*(-2*x2 + 2)*(-2*x4 + 2)/625 + 2*x1*x2*x3**2*(-2*x2 + 2)/625 + 2*x1*x2*x3*x4**2*(-2*x1 + 2)/625 + x1*x2*x3*x4*(-2*x1 + 2)*(-2*x2 + 2)/625 + 3*x1*x2*x3*x4*(-2*x1 + 2)*(-2*x4 + 2)/625 + x1*x2*x3*x4*(-2*x2 + 2)*(-2*x3 + 2)/625 + 3*x1*x2*x3*x4*(-2*x2 + 2)*(-2*x4 + 2)/625 + 2*x1*x2*x3*x4*(-2*x3 + 2)*(-2*x4 + 2)/625 + 2*x1*x2*x3*x4*(-2*x3 + 2)/625 + 3*x1*x2*x3*x4*(-2*x4 + 2)/625 + x1*x2*x3*(-2*x1 + 2)**2*(-2*x4 + 2)/1250 + x1*x2*x3*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)/625 + x1*x2*x3*(-2*x1 + 2)*(-2*x2 + 2)/1250 + x1*x2*x3*(-2*x1 + 2)*(-2*x4 + 2)/1250 + 2*x1*x2*x3*(-2*x1 + 2)/625 + x1*x2*x3*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/1250 + x1*x2*x3*(-2*x2 + 2)*(-2*x3 + 2)/625 + 2*x1*x2*x3*(-2*x2 + 2)*(-2*x4 + 2)/625 + 3*x1*x2*x3*(-2*x2 + 2)/1250 + x1*x2*x3*(-2*x4 + 2)**2/1250 + 17*x1*x2*x3*(-2*x4 + 2)/1250 + 19*x1*x2*x3/1250 + x1*x2*x4**2*(-2*x1 + 2)*(-2*x2 + 2)/625 + x1*x2*x4**2*(-2*x1 + 2)*(-2*x3 + 2)/625 + x1*x2*x4**2*(-2*x1 + 2)/625 + 8*x1*x2*x4**2/625 + x1*x2*x4*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)/1250 + x1*x2*x4*(-2*x1 + 2)*(-2*x2 + 2)/625 + 3*x1*x2*x4*(-2*x1 + 2)*(-2*x3 + 2)**2/1250 + x1*x2*x4*(-2*x1 + 2)*(-2*x3 + 2)/1250 + x1*x2*x4*(-2*x1 + 2)/250 + x1*x2*x4*(-2*x3 + 2)**2*(-2*x4 + 2)**2/1250 + x1*x2*x4*(-2*x3 + 2)**2*(-2*x4 + 2)/1250 + 3*x1*x2*x4*(-2*x3 + 2)**2/1250 + x1*x2*x4*(-2*x3 + 2)*(-2*x4 + 2)/625 + 17*x1*x2*x4*(-2*x3 + 2)/1250 + 3*x1*x2*x4*(-2*x4 + 2)/625 + 27*x1*x2*x4/1250 + x1*x2*(-2*x1 + 2)**2*(-2*x3 + 2)*(-2*x4 + 2)/2500 + x1*x2*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x4 + 2)/1250 + x1*x2*(-2*x1 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/625 + 9*x1*x2*(-2*x1 + 2)*(-2*x3 + 2)/2500 + x1*x2*(-2*x3 + 2)*(-2*x4 + 2)**2/500 + 23*x1*x2*(-2*x3 + 2)*(-2*x4 + 2)/2500 + 29*x1*x2*(-2*x3 + 2)/1250 + 2*x1*x3**2*x4**2*(-2*x2 + 2)*(-2*x3 + 2)/625 + 2*x1*x3**2*x4**2*(-2*x2 + 2)/625 + x1*x3**2*x4*(-2*x2 + 2)*(-2*x3 + 2)/625 + x1*x3**2*x4*(-2*x2 + 2)/625 + 2*x1*x3**2*x4*(-2*x4 + 2)/625 + 8*x1*x3**2*x4/625 + x1*x3*x4**2*(-2*x2 + 2)**2/625 + 3*x1*x3*x4**2*(-2*x2 + 2)/625 + x1*x3*x4**2*(-2*x3 + 2)/625 + x1*x3*x4*(-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x4 + 2)/1250 + x1*x3*x4*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/1250 + x1*x3*x4*(-2*x1 + 2)*(-2*x4 + 2)/1250 + x1*x3*x4*(-2*x2 + 2)**2*(-2*x3 + 2)**3/1250 + x1*x3*x4*(-2*x2 + 2)**2*(-2*x3 + 2)/1250 + x1*x3*x4*(-2*x2 + 2)*(-2*x3 + 2)/625 + 3*x1*x3*x4*(-2*x2 + 2)*(-2*x4 + 2)/625 + 4*x1*x3*x4*(-2*x2 + 2)/625 + x1*x3*x4*(-2*x3 + 2)/625 + x1*x3*x4*(-2*x4 + 2)/1250 + 2*x1*x3*x4/125 + x1*x3*(-2*x1 + 2)**2*(-2*x2 + 2)**2*(-2*x3 + 2)**2*(-2*x4 + 2)**2/2500 + x1*x3*(-2*x1 + 2)*(-2*x2 + 2)**3*(-2*x3 + 2)**2*(-2*x4 + 2)/2500 + x1*x3*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)**2/2500 + x1*x3*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x4 + 2)/2500 + 3*x1*x3*(-2*x1 + 2)*(-2*x4 + 2)**2/2500 + 13*x1*x3*(-2*x1 + 2)*(-2*x4 + 2)/2500 + x1*x3*(-2*x2 + 2)**2*(-2*x3 + 2)/500 + x1*x3*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/2500 + 3*x1*x3*(-2*x2 + 2)*(-2*x3 + 2)/1250 + x1*x4**2*(-2*x2 + 2)*(-2*x3 + 2)**2/625 + 3*x1*x4**2*(-2*x2 + 2)*(-2*x3 + 2)/1250 + 6*x1*x4**2*(-2*x2 + 2)/625 + x1*x4*(-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x3 + 2)*(-2*x4 + 2)**2/2500 + x1*x4*(-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x4 + 2)/2500 + x1*x4*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/2500 + x1*x4*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x4 + 2)/1250 + x1*x4*(-2*x2 + 2)*(-2*x3 + 2)**3/1250 + x1*x4*(-2*x2 + 2)*(-2*x3 + 2)**2/625 + x1*x4*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)**2/2500 + x1*x4*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/2500 + 6*x1*x4*(-2*x2 + 2)*(-2*x3 + 2)/625 + x1*x4*(-2*x2 + 2)*(-2*x4 + 2)/250 + 57*x1*x4*(-2*x2 + 2)/2500 + x1*(-2*x1 + 2)**2*(-2*x3 + 2)*(-2*x4 + 2)**2/5000 + x1*(-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x4 + 2)/2500 + x1*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)**2*(-2*x4 + 2)/5000 + x1*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x4 + 2)**2/5000 + 3*x1*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x4 + 2)/5000 + x1*(-2*x1 + 2)*(-2*x3 + 2)*(-2*x4 + 2)**2/5000 + x1*(-2*x1 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/2500 + x1*(-2*x2 + 2)*(-2*x3 + 2)**2*(-2*x4 + 2)**2/5000 + x1*(-2*x2 + 2)*(-2*x3 + 2)**2*(-2*x4 + 2)/2500 + 3*x1*(-2*x2 + 2)*(-2*x3 + 2)**2/1250 + x1*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)**2/2500 + 7*x1*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/2500 + 8*x1*(-2*x2 + 2)*(-2*x3 + 2)/625 + 2*x2**3*x3*(-2*x1 + 2)*(-2*x4 + 2)/625 + 2*x2**2*x3**2*x4*(-2*x2 + 2)/625 + x2**2*x3*x4*(-2*x1 + 2)/625 + 2*x2**2*x3*x4/625 + 3*x2**2*x3*(-2*x1 + 2)*(-2*x4 + 2)/1250 + x2**2*x3*(-2*x4 + 2)/125 + x2**2*x4*(-2*x1 + 2)**2*(-2*x2 + 2)*(-2*x3 + 2)**2*(-2*x4 + 2)/1250 + x2**2*x4*(-2*x1 + 2)*(-2*x3 + 2)**2*(-2*x4 + 2)/1250 + x2**2*(-2*x1 + 2)**2*(-2*x3 + 2)*(-2*x4 + 2)/2500 + x2**2*(-2*x1 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/2500 + x2*x3**3*(-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x4 + 2)/625 + x2*x3**2*x4*(-2*x1 + 2)*(-2*x2 + 2)/625 + 3*x2*x3**2*x4*(-2*x1 + 2)/625 + x2*x3**2*x4*(-2*x2 + 2)/125 + 4*x2*x3**2*x4/625 + x2*x3**2*(-2*x1 + 2)**2*(-2*x2 + 2)*(-2*x4 + 2)/1250 + x2*x3**2*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x4 + 2)/1250 + x2*x3**2*(-2*x2 + 2)*(-2*x4 + 2)/625 + x2*x3*x4**2*(-2*x1 + 2)*(-2*x3 + 2)/625 + x2*x3*x4*(-2*x1 + 2)**2*(-2*x2 + 2)*(-2*x3 + 2)/1250 + x2*x3*x4*(-2*x1 + 2)**2*(-2*x3 + 2)/1250 + x2*x3*x4*(-2*x1 + 2)**2/625 + 3*x2*x3*x4*(-2*x1 + 2)*(-2*x2 + 2)/1250 + x2*x3*x4*(-2*x1 + 2)*(-2*x3 + 2)/1250 + 2*x2*x3*x4*(-2*x1 + 2)/625 + x2*x3*x4*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/625 + 3*x2*x3*x4*(-2*x2 + 2)/625 + 3*x2*x3*x4*(-2*x3 + 2)*(-2*x4 + 2)/1250 + x2*x3*x4*(-2*x3 + 2)/1250 + 12*x2*x3*x4/625 + x2*x3*(-2*x1 + 2)**3*(-2*x4 + 2)/2500 + x2*x3*(-2*x1 + 2)**2*(-2*x2 + 2)*(-2*x4 + 2)/2500 + 3*x2*x3*(-2*x1 + 2)**2*(-2*x4 + 2)/2500 + x2*x3*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/2500 + x2*x3*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)/2500 + x2*x3*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x4 + 2)/2500 + 7*x2*x3*(-2*x1 + 2)*(-2*x4 + 2)/625 + x2*x3*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/2500 + 13*x2*x3*(-2*x2 + 2)*(-2*x4 + 2)/2500 + 57*x2*x3*(-2*x4 + 2)/2500 + x2*x4**2*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)/1250 + x2*x4*(-2*x1 + 2)**2*(-2*x2 + 2)**2*(-2*x3 + 2)/2500 + x2*x4*(-2*x1 + 2)**2*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/2500 + x2*x4*(-2*x1 + 2)**2*(-2*x2 + 2)/500 + x2*x4*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/2500 + x2*x4*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)/2500 + 2*x2*x4*(-2*x1 + 2)*(-2*x2 + 2)/625 + x2*x4*(-2*x1 + 2)*(-2*x3 + 2)**2*(-2*x4 + 2)/2500 + x2*x4*(-2*x1 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/1250 + x2*x4*(-2*x3 + 2)**2*(-2*x4 + 2)/1250 + 3*x2*x4*(-2*x3 + 2)*(-2*x4 + 2)/1250 + x2*(-2*x1 + 2)**2*(-2*x2 + 2)*(-2*x4 + 2)/5000 + x2*(-2*x1 + 2)**2*(-2*x3 + 2)*(-2*x4 + 2)/5000 + x2*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)**2/5000 + x2*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)**2/5000 + x2*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/5000 + x2*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)/2500 + x2*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x4 + 2)/625 + x2*(-2*x1 + 2)*(-2*x3 + 2)*(-2*x4 + 2)**2/1250 + x2*(-2*x1 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/500 + 9*x2*(-2*x3 + 2)*(-2*x4 + 2)**2/5000 + 3*x2*(-2*x3 + 2)*(-2*x4 + 2)/200 + x3**3*x4*(-2*x1 + 2)*(-2*x2 + 2)/625 + x3**2*x4**2*(-2*x1 + 2)*(-2*x3 + 2)/625 + x3**2*x4*(-2*x1 + 2)*(-2*x2 + 2)**2/625 + 7*x3**2*x4*(-2*x1 + 2)*(-2*x2 + 2)/1250 + 13*x3**2*x4*(-2*x1 + 2)/1250 + x3**2*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x4 + 2)/2500 + x3*x4**2*(-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x3 + 2)**2/1250 + x3*x4**2*(-2*x1 + 2)*(-2*x3 + 2)/1250 + x3*x4*(-2*x1 + 2)**2*(-2*x3 + 2)*(-2*x4 + 2)/2500 + x3*x4*(-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x3 + 2)/1250 + x3*x4*(-2*x1 + 2)*(-2*x2 + 2)**2/1250 + x3*x4*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)**2*(-2*x4 + 2)/2500 + 3*x3*x4*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)/1250 + x3*x4*(-2*x1 + 2)*(-2*x2 + 2)/125 + 3*x3*x4*(-2*x1 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/2500 + 3*x3*x4*(-2*x1 + 2)*(-2*x3 + 2)/500 + 18*x3*x4*(-2*x1 + 2)/625 + x3*(-2*x1 + 2)**2*(-2*x2 + 2)**2*(-2*x4 + 2)/2500 + x3*(-2*x1 + 2)**2*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/5000 + 3*x3*(-2*x1 + 2)**2*(-2*x2 + 2)*(-2*x4 + 2)/2500 + 3*x3*(-2*x1 + 2)**2*(-2*x4 + 2)/1250 + x3*(-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x3 + 2)/5000 + x3*(-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x4 + 2)/5000 + x3*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/5000 + 3*x3*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)/2500 + 3*x3*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x4 + 2)/1250 + 51*x3*(-2*x1 + 2)*(-2*x4 + 2)/5000 + 3*x4**2*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)/2500 + x4**2*(-2*x2 + 2)*(-2*x3 + 2)**2*(-2*x4 + 2)/2500 + x4*(-2*x1 + 2)**2*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/5000 + x4*(-2*x1 + 2)**2*(-2*x3 + 2)**2*(-2*x4 + 2)/5000 + x4*(-2*x1 + 2)**2*(-2*x3 + 2)*(-2*x4 + 2)/2500 + x4*(-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x3 + 2)**2/5000 + x4*(-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x3 + 2)/1250 + 3*x4*(-2*x1 + 2)*(-2*x2 + 2)**2/1250 + x4*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)**2/2500 + 7*x4*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)/2500 + 6*x4*(-2*x1 + 2)*(-2*x2 + 2)/625 + x4*(-2*x1 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/5000 + x4*(-2*x2 + 2)*(-2*x3 + 2)**2*(-2*x4 + 2)/5000 + x4*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/625 + (-2*x1 + 2)**2*(-2*x2 + 2)**2*(-2*x4 + 2)/10000 + (-2*x1 + 2)**2*(-2*x2 + 2)*(-2*x3 + 2)**2*(-2*x4 + 2)**2/10000 + (-2*x1 + 2)**2*(-2*x2 + 2)*(-2*x3 + 2)**2*(-2*x4 + 2)/10000 + (-2*x1 + 2)**2*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/10000 + (-2*x1 + 2)**2*(-2*x2 + 2)*(-2*x4 + 2)/5000 + 3*(-2*x1 + 2)**2*(-2*x3 + 2)*(-2*x4 + 2)/5000 + (-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x3 + 2)**2*(-2*x4 + 2)/10000 + (-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x3 + 2)**2/10000 + (-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x3 + 2)*(-2*x4 + 2)/5000 + (-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x3 + 2)/2500 + 3*(-2*x1 + 2)*(-2*x2 + 2)**2*(-2*x4 + 2)/10000 + (-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)**2*(-2*x4 + 2)/10000 + (-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)**2/2500 + (-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)**2/10000 + 19*(-2*x1 + 2)*(-2*x2 + 2)*(-2*x3 + 2)/10000 + (-2*x1 + 2)*(-2*x2 + 2)*(-2*x4 + 2)/625 + (-2*x1 + 2)*(-2*x3 + 2)*(-2*x4 + 2)**2/5000 + 11*(-2*x1 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/5000 + (-2*x2 + 2)*(-2*x3 + 2)**2*(-2*x4 + 2)**2/5000 + (-2*x2 + 2)*(-2*x3 + 2)**2*(-2*x4 + 2)/5000 + 3*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)**2/10000 + 23*(-2*x2 + 2)*(-2*x3 + 2)*(-2*x4 + 2)/10000
                i += 1
fig = plt.figure()
plt.xlable("Different set of 5 parameters")
plt.xlable("Probability")
plot = plt.scatter(b, a, s=5)
fig.savefig('huff.png')

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
f = sympy.lambdify(pmc.param, estimated_reward)
fv = np.vectorize(f)
v = sympy.lambdify(pmc.param, estimated_variance)
vv = np.vectorize(v)
# x = np.arange(0.15, 0.55, 0.005)
# y = np.arange(0.15, 0.55, 0.005)
x = np.arange(0, 1, 0.005)
y = np.arange(0, 1, 0.005)
# X, Y = np.meshgrid(x, y)
Xx, Yy = np.meshgrid(x, y)
X = np.where(Xx + Yy < 1, Xx, 0)
Y = np.where(Xx + Yy < 1, Yy, 0)
Z = fv(X, Y)
C = 2 * 1.96 * vv(X, Y) / sqrt(num_of_run)
plot = ax.scatter(X, Y, Z, c=C.ravel())
ax.set_xlabel(str(pmc.param[0]))
ax.set_ylabel(str(pmc.param[1]))
ax.set_zlabel('Expected value')
cb = plt.colorbar(plot)
cb.set_label("CI width")
